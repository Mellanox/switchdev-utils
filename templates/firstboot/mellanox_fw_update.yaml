heat_template_version: queens

description: >
  This's a temporary workaround for upgrading Mellanox FW
  and configuring Sriov in the FW

parameters:
  MLXUP_URL:
    type: string
    default: ''
    description: 'url for mlxup file'
  FORCE_UPDATE:
    type: boolean
    default: False
    description: "Force update the fw even if it's older version"
  NUM_OF_VFS:
    type: number
    default: 32
    description: 'Max number of vfs'
  SRIOV_EN:
    type: boolean
    default: True
    description: 'Enable/Disable Sriov'
  LINK_TYPE:
    type: string
    default: 'eth'
    description: 'Link type ["eth", "ib"]'

resources:
  userdata:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: mellanox_fw_update}

  mellanox_fw_update:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/usr/bin/env python

            from lxml import etree
            from oslo_concurrency import processutils
            import logging
            import os
            import urllib2

            logging.basicConfig(
              filename='/var/log/mellnox_fw_update.log',
              filemode='w',
              level=logging.DEBUG)

            _MLX_CONFIG = {
              "SRIOV_EN": "$SRIOV_EN",
              "NUM_OF_VFS": "$NUM_OF_VFS",
              "LINK_TYPE": "$LINK_TYPE",
              "LINK_TYPE_P1": "$LINK_TYPE",
              "LINK_TYPE_P2": "$LINK_TYPE"}
            _FORCE_UPDATE = $FORCE_UPDATE
            _MLXUP_PATH = "/tmp/mlxup"
            _MLXUP_URL = "$MLXUP_URL"

            def get_mlxup():
              try:
                filedata = urllib2.urlopen(_MLXUP_URL)
              except urllib2.HTTPError as err:
                logging.error(err)
                raise
              with open(_MLXUP_PATH, 'wb') as f:
                f.write(filedata.read())
              os.chmod(_MLXUP_PATH, 0777)

            def mstconfig_parse_data(data):
              # Parsing the mstconfig out to json
              data = list(filter(None, data.split('\n')))
              r = {}
              c = 0
              for line in data:
                c += 1
                if 'Configurations:'in line:
                  break
              for i in range(c, len(data)):
                d = list(filter(None, data[i].strip().split()))
                r[d[0]] = d[1]
              return r

            def run_command(*cmd, **kwargs):
              logging.info("Running %s" % ' '.join(cmd))
              try:
                out, err = processutils.execute(*cmd, **kwargs)
              except processutils.ProcessExecutionError:
                logging.error(
                  "Failed to execute %s" % ' '.join(cmd))
                raise
              if err:
                logging.error(err)
                exit(1)
              logging.debug(out)
              return out

            def get_devices():
              out = run_command(
                _MLXUP_PATH, "--query-format", "xml")
              tree = etree.XML(out)
              return tree.xpath("Device")

            def check_for_fw_update(device):
              bus = device.attrib.get('pciName')
              current_fw = device.xpath(
                "Versions/FW")[0].attrib.get('current')
              available_fw = device.xpath(
                "Versions/FW")[0].attrib.get('available')
              if available_fw == "N/A":
                return False
              else:
                return available_fw > current_fw

            def update_fw(bus, force_update=False):
              # Updating the fw
              logging.info("Updateing FW for device %s" % bus)
              cmd = [_MLXUP_PATH, "-d", bus, "-u", "-y"]
              if force_update:
                cmd.append("--force")
              run_command(*cmd)

            def get_device_conf_dict(bus):
              out = run_command("mstconfig", "-d", bus, "q")
              return mstconfig_parse_data(out)

            def set_conf(bus):
              current_mlx_config = get_device_conf_dict(bus)
              for key, value in _MLX_CONFIG.items():
                if current_mlx_config.get(key) and value.lower(
                ) not in current_mlx_config.get(key).lower():
                  # Setting the configuration for mellanox device
                  run_command(
                    "mstconfig", "-d", bus, "-y", "set", "%s=%s" %
                    (key, value))
                  logging.info(
                    "Setting %s to %s done successfully" %
                    (key, value))

            def main():
              get_mlxup()
              # Getting the mellanox devices
              devices = get_devices()

              for device in devices:
                bus = device.attrib.get('pciName')

                if _FORCE_UPDATE:
                  # Force updating the fw
                  update_fw(bus, force_update=True)
                elif check_for_fw_update(device):
                  # Updating the fw
                  update_fw(bus)

                # Setting the configuration for mellanox device
                set_conf(bus)

            if __name__ == '__main__':
              main()

          params:
            $MLXUP_URL: {get_param: MLXUP_URL}
            $FORCE_UPDATE: {get_param: FORCE_UPDATE}
            $NUM_OF_VFS: {get_param: NUM_OF_VFS}
            $SRIOV_EN: {get_param: SRIOV_EN}
            $LINK_TYPE: {get_param: LINK_TYPE}


outputs:
  # This means get_resource from the parent template will get the userdata, see:
  # http://docs.openstack.org/developer/heat/template_guide/composition.html#making-your-template-resource-more-transparent
  # Note this is new-for-kilo, an alternative is returning a value then using
  # get_attr in the parent template instead.
  OS::stack_id:
    value: {get_resource: userdata}
